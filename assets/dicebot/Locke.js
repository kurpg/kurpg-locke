/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$get_damage', '$!', '$nil?', '$get_ship_attack', '$get_shoot_attack', '$get_event_effect', '$[]', '$upcase', '$===', '$get_table_by_1d6', '$get_table_by_2d6', '$get_ship_attack_normal', '$get_ship_attack_black_maiden', '$get_ship_attack_mouse', '$roll_nd6', '$==', '$<=', '$get_arrival_check', '$get_revival_check', '$get_zanryu_shinen_check', '$get_transformation_check', '$get_t13_effect', '$get_t14_effect', '$get_plug_effect', '$to_i', '$last_match', '$each', '$+', '$-', '$roll', '$getDiceListFromDiceText', '$get_table_by_nd6', '$setPrefixes', '$keys']);
  return (function($base, $super, $parent_nesting) {
    function $Locke(){};
    var self = $Locke = $klass($base, $super, 'Locke', $Locke);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Locke_initialize_1, TMP_Locke_gameName_2, TMP_Locke_gameType_3, TMP_Locke_getHelpMessage_4, TMP_Locke_rollDiceCommand_5, TMP_Locke_get_ship_attack_6, TMP_Locke_get_ship_attack_normal_7, TMP_Locke_get_ship_attack_black_maiden_8, TMP_Locke_get_ship_attack_mouse_9, TMP_Locke_get_event_effect_10, TMP_Locke_get_arrival_check_11, TMP_Locke_get_revival_check_12, TMP_Locke_get_zanryu_shinen_check_13, TMP_Locke_get_transformation_check_14, TMP_Locke_get_plug_effect_15, TMP_Locke_get_t13_effect_16, TMP_Locke_get_t14_effect_17, TMP_Locke_get_shoot_attack_19, TMP_Locke_get_damage_20, TMP_Locke_roll_nd6_21, TMP_Locke_get_table_by_nd6_22, TMP_Locke_get_table_by_2d6_23, TMP_Locke_get_table_by_1d6_24, $a;

    
    
    Opal.defn(self, '$initialize', TMP_Locke_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_Locke_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Locke_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Locke_initialize_1, false), $zuper, $iter);
      return (self.sendMode = 2);
    }, TMP_Locke_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_Locke_gameName_2 = function $$gameName() {
      var self = this;

      return "超人ロック"
    }, TMP_Locke_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_Locke_gameType_3 = function $$gameType() {
      var self = this;

      return "Locke"
    }, TMP_Locke_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_Locke_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "ARR そこに居たチェック\n" + "REV 実は生きていたチェック\n" + "ZS 残留思念チェック\n" + "\n" + "SHIP 船\n" + "SHIP_BM ブラックメイデン\n" + "SHIP_MS マウス\n" + "\n" + "nRG レイガン  n:攻撃回数（以下同様）\n" + "nBL ブラスター\n" + "nBZ バズーカ\n" + "nBC ビームキャノン\n" + "\n" + "DMGn:m n:m のダメージ\n" + "\n" + "Tn トラップn\n" + "T1-3 トラップ1-3\n" + "T1-4 トラップ1-4\n" + "\n" + "GENE 遺伝子再編成\n" + "PLUG プラグチェック\n" + "RA ランダムアクシデント\n" + "TF 変身チェック\n"
    }, TMP_Locke_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_Locke_rollDiceCommand_5 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, result_text = nil, info = nil, name = nil, type = nil, table = nil, $case = nil, value = nil, num = nil, dice_text = nil;

      
      result_text = self.$get_damage(command);
      if ($truthy(result_text['$nil?']()['$!']())) {
        return result_text};
      result_text = self.$get_ship_attack(command);
      if ($truthy(result_text['$nil?']()['$!']())) {
        return result_text};
      result_text = self.$get_shoot_attack(command);
      if ($truthy(result_text['$nil?']()['$!']())) {
        return result_text};
      result_text = self.$get_event_effect(command);
      if ($truthy(result_text['$nil?']()['$!']())) {
        return result_text};
      info = (($a = $Locke.$$cvars['@@tables']) == null ? nil : $a)['$[]'](command.$upcase());
      if ($truthy(info['$nil?']())) {
        return nil};
      name = info['$[]']("name");
      type = info['$[]']("type");
      table = info['$[]']("table");
      $b = (function() {$case = type;
      if ("1D6"['$===']($case)) {return self.$get_table_by_1d6(table)}
      else if ("2D6"['$===']($case)) {return self.$get_table_by_2d6(table)}
      else { return nil }})(), $a = Opal.to_ary($b), (value = ($a[0] == null ? nil : $a[0])), (num = ($a[1] == null ? nil : $a[1])), (dice_text = ($a[2] == null ? nil : $a[2])), $b;
      result_text = "" + (name) + " (" + (num) + "[" + (dice_text) + "]) → " + (value);
      return result_text;
    }, TMP_Locke_rollDiceCommand_5.$$arity = 1);
    
    Opal.defn(self, '$get_ship_attack', TMP_Locke_get_ship_attack_6 = function $$get_ship_attack(command) {
      var self = this, result_text = nil, $case = nil;

      
      result_text = "";
      $case = command.$upcase();
      if ("SHIP"['$===']($case)) {result_text = self.$get_ship_attack_normal()}
      else if ("SHIP_BM"['$===']($case)) {result_text = self.$get_ship_attack_black_maiden()}
      else if ("SHIP_MS"['$===']($case)) {result_text = self.$get_ship_attack_mouse()}
      else {return nil};
      return result_text;
    }, TMP_Locke_get_ship_attack_6.$$arity = 1);
    
    Opal.defn(self, '$get_ship_attack_normal', TMP_Locke_get_ship_attack_normal_7 = function $$get_ship_attack_normal() {
      var $a, $b, self = this, num = nil, dice_text = nil, attack_text = nil;

      
      $b = self.$roll_nd6(2), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      attack_text = "";
      if (num['$=='](2)) {
        attack_text = "D弾 火力50"
      } else if (num['$=='](3)) {
        attack_text = "G弾 火力30"
      } else if ($truthy((($a = $rb_le(4, num)) ? $rb_le(num, 6) : $rb_le(4, num)))) {
        attack_text = "ビームキャノン"
      } else if ($truthy((($a = $rb_le(7, num)) ? $rb_le(num, 11) : $rb_le(7, num)))) {
        attack_text = "不発"
      } else if (num['$=='](12)) {
        attack_text = "誤爆 ビームキャノン"};
      return "" + "船 (" + (num) + "[" + (dice_text) + "]) " + (attack_text);
    }, TMP_Locke_get_ship_attack_normal_7.$$arity = 0);
    
    Opal.defn(self, '$get_ship_attack_black_maiden', TMP_Locke_get_ship_attack_black_maiden_8 = function $$get_ship_attack_black_maiden() {
      var $a, $b, self = this, num = nil, dice_text = nil, attack_text = nil;

      
      $b = self.$roll_nd6(2), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      attack_text = "";
      if (num['$=='](2)) {
        attack_text = "粒子加速砲 火力100"
      } else if ($truthy((($a = $rb_le(3, num)) ? $rb_le(num, 6) : $rb_le(3, num)))) {
        attack_text = "ビームキャノン"
      } else if ($truthy((($a = $rb_le(7, num)) ? $rb_le(num, 11) : $rb_le(7, num)))) {
        attack_text = "不発"
      } else if (num['$=='](12)) {
        attack_text = "誤爆 ビームキャノン"};
      return "" + "ブラックメイデン (" + (num) + "[" + (dice_text) + "]) " + (attack_text);
    }, TMP_Locke_get_ship_attack_black_maiden_8.$$arity = 0);
    
    Opal.defn(self, '$get_ship_attack_mouse', TMP_Locke_get_ship_attack_mouse_9 = function $$get_ship_attack_mouse() {
      var $a, $b, self = this, num = nil, dice_text = nil, attack_text = nil;

      
      $b = self.$roll_nd6(2), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      attack_text = "";
      if (num['$=='](2)) {
        attack_text = "重力ビーム 火力100"
      } else if (num['$=='](3)) {
        attack_text = "D弾 火力50"
      } else if ($truthy((($a = $rb_le(4, num)) ? $rb_le(num, 5) : $rb_le(4, num)))) {
        attack_text = "G弾 火力30"
      } else if ($truthy((($a = $rb_le(6, num)) ? $rb_le(num, 8) : $rb_le(6, num)))) {
        attack_text = "ビームキャノン"
      } else if ($truthy((($a = $rb_le(9, num)) ? $rb_le(num, 11) : $rb_le(9, num)))) {
        attack_text = "不発"
      } else if (num['$=='](12)) {
        attack_text = "誤爆 ビームキャノン"};
      return "" + "マウス (" + (num) + "[" + (dice_text) + "]) " + (attack_text);
    }, TMP_Locke_get_ship_attack_mouse_9.$$arity = 0);
    
    Opal.defn(self, '$get_event_effect', TMP_Locke_get_event_effect_10 = function $$get_event_effect(command) {
      var self = this, result_text = nil, $case = nil;

      
      result_text = "";
      $case = command.$upcase();
      if ("ARR"['$===']($case)) {result_text = self.$get_arrival_check()}
      else if ("REV"['$===']($case)) {result_text = self.$get_revival_check()}
      else if ("ZS"['$===']($case)) {result_text = self.$get_zanryu_shinen_check()}
      else if ("TF"['$===']($case)) {result_text = self.$get_transformation_check()}
      else if ("T1-3"['$===']($case)) {result_text = self.$get_t13_effect()}
      else if ("T1-4"['$===']($case)) {result_text = self.$get_t14_effect()}
      else if ("PLUG"['$===']($case)) {result_text = self.$get_plug_effect()}
      else {return nil};
      return result_text;
    }, TMP_Locke_get_event_effect_10.$$arity = 1);
    
    Opal.defn(self, '$get_arrival_check', TMP_Locke_get_arrival_check_11 = function $$get_arrival_check() {
      var $a, $b, self = this, num = nil, dice_text = nil, effect_text = nil;

      
      $b = self.$roll_nd6(2), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      effect_text = "";
      if ($truthy((($a = $rb_le(2, num)) ? $rb_le(num, 4) : $rb_le(2, num)))) {
        effect_text = "そこに居た。"
      } else if (num['$=='](5)) {
        effect_text = "2ラウンド目に到着。"
      } else if (num['$=='](6)) {
        effect_text = "3ラウンド目に到着。"
      } else if (num['$=='](7)) {
        effect_text = "4ラウンド目に到着。"
        } else {
        effect_text = "居なかった。"
      };
      return "" + "そこに居たチェック (" + (num) + "[" + (dice_text) + "]) " + (effect_text);
    }, TMP_Locke_get_arrival_check_11.$$arity = 0);
    
    Opal.defn(self, '$get_revival_check', TMP_Locke_get_revival_check_12 = function $$get_revival_check() {
      var $a, $b, self = this, num = nil, dice_text = nil, effect_text = nil;

      
      $b = self.$roll_nd6(2), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      effect_text = "";
      if (num['$=='](2)) {
        effect_text = "実は生きていた。"
      } else if ($truthy((($a = $rb_le(2, num)) ? $rb_le(num, 5) : $rb_le(2, num)))) {
        effect_text = "残留思念チェック コマンドZSの効果を適用。"
        } else {
        effect_text = "何も無かった。"
      };
      return "" + "実は生きていたチェック (" + (num) + "[" + (dice_text) + "]) " + (effect_text);
    }, TMP_Locke_get_revival_check_12.$$arity = 0);
    
    Opal.defn(self, '$get_zanryu_shinen_check', TMP_Locke_get_zanryu_shinen_check_13 = function $$get_zanryu_shinen_check() {
      var $a, $b, self = this, num = nil, dice_text = nil, effect_text = nil;

      
      $b = self.$roll_nd6(2), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      effect_text = "";
      if (num['$=='](2)) {
        effect_text = "残留思念 火力50"
      } else if (num['$=='](3)) {
        effect_text = "残留思念 火力30"
      } else if (num['$=='](4)) {
        effect_text = "残留思念 火力20"
      } else if ($truthy(($truthy($a = num['$=='](5)) ? $a : num['$=='](6)))) {
        effect_text = "残留思念 火力10"
        } else {
        effect_text = "何も無かった。"
      };
      return "" + "残留思念チェック (" + (num) + "[" + (dice_text) + "]) " + (effect_text);
    }, TMP_Locke_get_zanryu_shinen_check_13.$$arity = 0);
    
    Opal.defn(self, '$get_transformation_check', TMP_Locke_get_transformation_check_14 = function $$get_transformation_check() {
      var $a, $b, self = this, num = nil, dice_text = nil, effect_text = nil;

      
      $b = self.$roll_nd6(2), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      effect_text = "";
      if (num['$=='](2)) {
        effect_text = "Lv+1,パワー+5"
      } else if (num['$=='](3)) {
        effect_text = "戦闘中のみコンバットカード+2"
      } else if ($truthy((($a = $rb_le(4, num)) ? $rb_le(num, 10) : $rb_le(4, num)))) {
        effect_text = "何もなし。"
      } else if (num['$=='](11)) {
        effect_text = "精神力+1"
      } else if (num['$=='](12)) {
        effect_text = "リインカーネーション"};
      return "" + "変身チェック (" + (num) + "[" + (dice_text) + "]) " + (effect_text);
    }, TMP_Locke_get_transformation_check_14.$$arity = 0);
    
    Opal.defn(self, '$get_plug_effect', TMP_Locke_get_plug_effect_15 = function $$get_plug_effect() {
      var $a, $b, self = this, num = nil, dice_text = nil, effect_text = nil;

      
      $b = self.$roll_nd6(2), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      effect_text = "";
      if ($truthy(($truthy($a = num['$=='](2)) ? $a : num['$=='](3)))) {
        effect_text = "プラグが抜けた。刺さる前の能力値に戻る。"
      } else if ($truthy((($a = $rb_le(4, num)) ? $rb_le(num, 9) : $rb_le(4, num)))) {
        effect_text = "何もなし。"
      } else if ($truthy(($truthy($a = num['$=='](10)) ? $a : num['$=='](11)))) {
        effect_text = "戦闘・戦闘行動をしなければならない。"
      } else if (num['$=='](12)) {
        effect_text = "爆死。"};
      return "" + "プラグチェック (" + (num) + "[" + (dice_text) + "]) " + (effect_text);
    }, TMP_Locke_get_plug_effect_15.$$arity = 0);
    
    Opal.defn(self, '$get_t13_effect', TMP_Locke_get_t13_effect_16 = function $$get_t13_effect() {
      var $a, $b, self = this, num = nil, dice_text = nil, effect_text = nil;

      
      $b = self.$roll_nd6(1), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      effect_text = "";
      if ($truthy((($a = $rb_le(1, num)) ? $rb_le(num, 3) : $rb_le(1, num)))) {
        effect_text = "TRAP1"
      } else if ($truthy(($truthy($a = num['$=='](4)) ? $a : num['$=='](5)))) {
        effect_text = "TRAP2"
      } else if (num['$=='](6)) {
        effect_text = "TRAP3"};
      return "" + "T1-3 (" + (num) + "[" + (dice_text) + "]) " + (effect_text);
    }, TMP_Locke_get_t13_effect_16.$$arity = 0);
    
    Opal.defn(self, '$get_t14_effect', TMP_Locke_get_t14_effect_17 = function $$get_t14_effect() {
      var $a, $b, self = this, num = nil, dice_text = nil, effect_text = nil;

      
      $b = self.$roll_nd6(2), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      effect_text = "";
      if ($truthy((($a = $rb_le(2, num)) ? $rb_le(num, 6) : $rb_le(2, num)))) {
        effect_text = "TRAP1"
      } else if ($truthy(($truthy($a = num['$=='](7)) ? $a : num['$=='](8)))) {
        effect_text = "TRAP2"
      } else if ($truthy(($truthy($a = num['$=='](9)) ? $a : num['$=='](10)))) {
        effect_text = "TRAP3"
      } else if ($truthy(($truthy($a = num['$=='](11)) ? $a : num['$=='](12)))) {
        effect_text = "TRAP4"};
      return "" + "T1-4 (" + (num) + "[" + (dice_text) + "]) " + (effect_text);
    }, TMP_Locke_get_t14_effect_17.$$arity = 0);
    
    Opal.defn(self, '$get_shoot_attack', TMP_Locke_get_shoot_attack_19 = function $$get_shoot_attack(command) {
      var $a, $b, TMP_18, self = this, weapon_index = nil, weapon_name = nil, $case = nil, count = nil, weapon_damage_table = nil, _ = nil, dice_text = nil, dice_list = nil, shock = nil, dice = nil;

      
      weapon_index = 0;
      weapon_name = "";
      $case = command;
      if (/(\d+)*RG/i['$===']($case)) {
      weapon_index = 0;
      weapon_name = "レイガン";}
      else if (/(\d+)*BL/i['$===']($case)) {
      weapon_index = 1;
      weapon_name = "ブラスター";}
      else if (/(\d+)*BZ/i['$===']($case)) {
      weapon_index = 2;
      weapon_name = "バズーカ";}
      else if (/(\d+)*BC/i['$===']($case)) {
      weapon_index = 3;
      weapon_name = "ビームキャノン";}
      else {return nil};
      count = ($truthy($a = Opal.const_get_relative($nesting, 'Regexp').$last_match(1)) ? $a : 1).$to_i();
      weapon_damage_table = [[0, 1, 2, 2, 3, 4], [3, 4, 5, 5, 6, 7], [6, 7, 8, 9, 10, 11], [10, 12, 14, 16, 18, 20]];
      $b = self.$roll_nd6(count), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), (dice_list = ($a[2] == null ? nil : $a[2])), $b;
      shock = 0;
      
      ;
      ;
      $send(dice_list, 'each', [], (TMP_18 = function($for_tmp1){var self = TMP_18.$$s || this;
if ($for_tmp1 == null) $for_tmp1 = nil;
      
        dice = $for_tmp1;
        return (shock = $rb_plus(shock, weapon_damage_table['$[]'](weapon_index)['$[]']($rb_minus(dice, 1))));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18));;
      return "" + (weapon_name) + "x" + (count) + " ([" + (dice_text) + "]) → 火力" + (shock);
    }, TMP_Locke_get_shoot_attack_19.$$arity = 1);
    
    Opal.defn(self, '$get_damage', TMP_Locke_get_damage_20 = function $$get_damage(command) {
      var $a, $b, self = this, $case = nil, dmg_1 = nil, dmg_2 = nil, table_index = nil, damage_rate_table = nil, damage = nil, num = nil, dice_text = nil, transform_check_text = nil;

      
      $case = command;
      if (/DMG(1|2):(\d+)/i['$===']($case)) {
      dmg_1 = Opal.const_get_relative($nesting, 'Regexp').$last_match(1).$to_i();
      dmg_2 = Opal.const_get_relative($nesting, 'Regexp').$last_match(2).$to_i();}
      else {return nil};
      table_index = 0;
      if (dmg_1['$=='](2)) {
        if (dmg_2['$=='](1)) {
          table_index = 0
          } else {
          return nil
        }
      } else if ($truthy((($a = $rb_le(1, dmg_2)) ? $rb_le(dmg_2, 10) : $rb_le(1, dmg_2)))) {
        table_index = dmg_2
        } else {
        return nil
      };
      damage_rate_table = [[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0], [3, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0], [3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0], [3, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0], [3, 3, 3, 2, 2, 1, 1, 1, 1, 0, 0], [4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 0], [4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1], [4, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1], [5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1]];
      $b = self.$get_table_by_2d6(damage_rate_table['$[]'](table_index)), $a = Opal.to_ary($b), (damage = ($a[0] == null ? nil : $a[0])), (num = ($a[1] == null ? nil : $a[1])), (dice_text = ($a[2] == null ? nil : $a[2])), $b;
      transform_check_text = "";
      if ($truthy(($truthy($a = num['$=='](2)) ? $a : num['$=='](12)))) {
        transform_check_text = "変身チェック（コマンド TF）"};
      return "" + "ダメージ (" + (num) + "[" + (dice_text) + "]) → " + (damage) + " ダメージ " + (transform_check_text);
    }, TMP_Locke_get_damage_20.$$arity = 1);
    
    Opal.defn(self, '$roll_nd6', TMP_Locke_roll_nd6_21 = function $$roll_nd6(n) {
      var $a, $b, self = this, num = nil, dice_text = nil, dice_list = nil;

      
      $b = self.$roll(n, 6), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      dice_list = self.$getDiceListFromDiceText(dice_text);
      return [num, dice_text, dice_list];
    }, TMP_Locke_roll_nd6_21.$$arity = 1);
    
    Opal.defn(self, '$get_table_by_nd6', TMP_Locke_get_table_by_nd6_22 = function $$get_table_by_nd6(count, table) {
      var $a, $b, self = this, num = nil, dice_text = nil, dice_list = nil, value = nil;

      
      $b = self.$roll_nd6(count), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), (dice_list = ($a[2] == null ? nil : $a[2])), $b;
      value = table['$[]']($rb_minus(num, count));
      return [value, num, dice_text, dice_list];
    }, TMP_Locke_get_table_by_nd6_22.$$arity = 2);
    
    Opal.defn(self, '$get_table_by_2d6', TMP_Locke_get_table_by_2d6_23 = function $$get_table_by_2d6(table) {
      var self = this;

      return self.$get_table_by_nd6(2, table)
    }, TMP_Locke_get_table_by_2d6_23.$$arity = 1);
    
    Opal.defn(self, '$get_table_by_1d6', TMP_Locke_get_table_by_1d6_24 = function $$get_table_by_1d6(table) {
      var self = this;

      return self.$get_table_by_nd6(1, table)
    }, TMP_Locke_get_table_by_1d6_24.$$arity = 1);
    (Opal.class_variable_set($Locke, '@@tables', $hash2(["T1", "T2", "T3", "T4", "GENE", "RA"], {"T1": $hash2(["name", "type", "table"], {"name": "TRAP1", "type": "2D6", "table": ["死人苔 1Dで耐久力チェックに失敗すると、0Lvになる。かかったキャラと同じマスにいるキャラは耐久力チェックをし、失敗すると動揺に0Lvになる", "ネクラ 全員10:1ダメージ", "ダンディー シルエットが女性だと2D回休み。トワイライト・ウォーリアはOPENすると勝利する。", "幻覚攻撃 2Dでレベルチェック。失敗すると出目の火力のダメージを食らう。ぞろ目はもう１回。", "ダイバー 耐久8のブラスター隊4人。Eストロハイムは正体が露見し、装備が回復する。逮捕不可。", "締め切り シルエットが聖悠紀だと2D6回、ロックだと1D6回休み。", "サイバー 耐久10のブラスター隊5人。ラウンドの最後に2回目の攻撃。逮捕不可。", "パッX 1D6回休み", "小麦 一時的にゲーム盤から除外される。自分の手番で1D6で5,6を振れば帰還。", "TRAP2 TRAP2へ。", "暗黒騎士団 上空からD弾。ラウンドの最後に1D6で4,5,6でオーバーヒート。機械攻撃。"]}), "T2": $hash2(["name", "type", "table"], {"name": "TRAP2", "type": "2D6", "table": ["遺伝子再編成 コマンドGENEの結果を適用。", "白カードひき直し 白カードを引き直す。", "ブラスト レベル+1、耐久-1、パワー+20、同系列のカードは出せる細田のものを使用しなければならない。より高いレベルのカードをチェックすることは可能。死んで復活するか、もう一度かかると治る。", "ロックに会う 説得される。", "白顔露見 白カードと顔カードが露見する。", "共振樹 レベルによって違う火力のダメージを食らう。火力は以下の通り。0:0, 1:3, 2:6, 3:10, 4:20, 5:30, 6:50", "結婚・離婚 独身のキャラは既婚に、既婚のキャラは独身になる。", "白カードもう１枚 白カードをもう１枚引く。", "プラグ 5レベル、パワー50のエスパーになる。自分の手番か、戦闘時のラウンドの最初にコマンドPLUGの効果を適用。", "TRAP3 TRAP3へ。", "全カード露見 キャラクターカードと白カード、顔カード、能力カードが露見する。"]}), "T3": $hash2(["name", "type", "table"], {"name": "TRAP3", "type": "2D6", "table": ["真の人格 リインカーネーション。", "結界 ゲームから除外される。そこにいたチェックで4以下を振ると復帰できる。", "あたり 惑星カードを2枚引く。引く度に効果を適用する。", "信念逆転 GoodはEvilに、EvilはGoodに、E/GはG/Eになる。リュカーン、エルナ、カルダームは顔カードの色が逆転する。ロックはかからない。", "全員ランテレ 全員ランダムテレポート。", "情報入手3枚 情報入手3枚、ジェシカは入れることができるが、トワイライト・ウォーリアは入らない。", "攻守逆転 Goodが拠点を防衛し、Evilが破壊するようになる。もう一度適用されると元の状態に戻る。", "真のG/E 顔カードが青であればEvilに、赤であればGoodになる。個別勝利条件は消える。ロックはかからない。", "遺伝子再編成 コマンドGENEの結果を適用。", "TRAP4 TRAP4へ。", "一列破壊 ランダムに1列が破壊される。そこにいたキャラはレベルチェックに成功しないと死ぬ。ただし、船を持っているキャラは6Lvとしてチェックできる。ブラックメイデンは船扱いにならない。"]}), "T4": $hash2(["name", "type", "table"], {"name": "TRAP4", "type": "2D6", "table": ["全員真の人格 全員リインカーネーション。", "全員10:1 全員に10:1のダメージ。ロックもかかる。", "全員ブラスト 全員ブラストする。レベル+1、耐久-1、パワー+20、同系列のカードは出せる細田のものを使用しなければならない。より高いレベルのカードをチェックすることは可能。死んで復活するか、もう一度かかると治る。", "全員ロックに会う 全員説得される。", "全員惑星カード1枚 全員惑星カード1枚引く", "全員ランダムアクシデント 全員コマンドRAの効果を適用する。", "全員白カードもう1枚 全員白カードを1枚引ける。", "全員全カード露見 全員全カードが露見する。", "全員遺伝子再編成 全員遺伝子再編成する。", "TRAP1 TRAP1へ。", "全土破壊 全土が破壊される。全員レベルチェックし、成功したらゲームに勝利、失敗したら敗北する。ただし、船を持っているキャラは6Lvとしてチェックできる。ブラックメイデンは船扱いにならない。"]}), "GENE": $hash2(["name", "type", "table"], {"name": "遺伝子再編成", "type": "1D6", "table": ["精神+1、耐久-1", "精神+1、レベル-1", "耐久+1、レベル-1", "レベル+1、精神-1", "耐久+1、精神-1", "レベル+1、耐久-1"]}), "RA": $hash2(["name", "type", "table"], {"name": "ランダムアクシデント", "type": "1D6", "table": ["真の人格 リインカーネーションする。", "ブラスト レベル+1、耐久-1、パワー+20、同系列のカードは出せる細田のものを使用しなければならない。より高いレベルのカードをチェックすることは可能。死んで復活するか、もう一度かかると治る。", "信念逆転 GoodはEvilに、EvilはGoodに、E/GはG/Eになる。リュカーン、エルナ、カルダームは顔カードの色が逆転する。ロックはかからない。", "ロックに会う 説得される。", "遺伝子再編成 コマンドGENEの結果を適用。", "何もなし。"]})})));
    return self.$setPrefixes($rb_plus(["ARR", "REV", "ZS", "TF", "SHIP", "SHIP_BM", "SHIP_MS", "PLUG", "T1-3", "T1-4", /DMG(1|2):(\d+)/i, /(\d+)*RG/i, /(\d+)*BL/i, /(\d+)*BZ/i, /(\d+)*BC/i], (($a = $Locke.$$cvars['@@tables']) == null ? nil : $a).$keys()));
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
